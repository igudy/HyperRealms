/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T 
Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/hacker-room-new-transformed.glb [2.56MB] (93%)
*/

import { useGLTF, useTexture } from '@react-three/drei';

export function HackerRoom(props) {
  const { nodes, materials } = useGLTF('/models/hacker-room.glb');

  const monitortxt = useTexture('textures/desk/monitor.png');
  const screenTxt = useTexture('textures/desk/screen.png');

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.screen_screens_0.geometry} material={materials.screens}>
        <meshMatcapMaterial map={screenTxt} />
      </mesh>
      <mesh geometry={nodes.screen_glass_glass_0.geometry} material={materials.glass} />
      <mesh geometry={nodes.table_table_mat_0_1.geometry} material={materials.table_mat} />
      <mesh geometry={nodes.table_table_mat_0_2.geometry} material={materials.computer_mat}>
        <meshMatcapMaterial map={monitortxt} />
      </mesh>
      <mesh geometry={nodes.table_table_mat_0_3.geometry} material={materials.server_mat} />
      <mesh geometry={nodes.table_table_mat_0_4.geometry} material={materials.vhsPlayer_mat} />
      <mesh geometry={nodes.table_table_mat_0_5.geometry} material={materials.stand_mat} />
      <mesh geometry={nodes.table_table_mat_0_6.geometry} material={materials.mat_mat} />
      <mesh geometry={nodes.table_table_mat_0_7.geometry} material={materials.arm_mat} />
      <mesh geometry={nodes.table_table_mat_0_8.geometry} material={materials.tv_mat}>
        <meshMatcapMaterial map={monitortxt} />
      </mesh>
      <mesh geometry={nodes.table_table_mat_0_9.geometry} material={materials.cables_mat} />
      <mesh geometry={nodes.table_table_mat_0_10.geometry} material={materials.props_mat} />
      <mesh geometry={nodes.table_table_mat_0_11.geometry} material={materials.ground_mat} />
      <mesh geometry={nodes.table_table_mat_0_12.geometry} material={materials.key_mat} />
    </group>
  );
}

useGLTF.preload('/models/hacker-room.glb');



/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Benjamin Aubert (https://sketchfab.com/bainjamaing)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/cartoon-car-a5f6a99597d34c06832e7cc07e4a6c69
Title: Cartoon Car
*/

// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'

// export function Car(props) {
//   const { nodes, materials } = useGLTF('/models/cartoon_car.glb')
//   return (
//     <group {...props} dispose={null}>
//       <group rotation={[-Math.PI / 2, 0, 0]}>
//         <mesh
//           castShadow
//           receiveShadow
//           geometry={nodes.defaultMaterial.geometry}
//           material={materials.BASE}
//           rotation={[Math.PI / 2, 0, 0]}
//         />
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('/models/cartoon_car.glb')



/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Split Studios (https://sketchfab.com/splitcg)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/stylized-car-0323feeb81e84e67a13acc964b6c609b
Title: Stylized Car
*/
// import * as THREE from 'three'
// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'

// export function Car(...props) {
//   const { nodes, materials } = useGLTF('/models/stylized_car.glb')
//   return (
//     <group {...props} dispose={null}>
//       <group rotation={[-Math.PI / 2, 0, 0]} scale={0.53507}>
//         <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
//           <group rotation={[-Math.PI / 2, 0, 0]} scale={793.19}>
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Plane007_Ground_0.geometry}
//               material={materials.Ground}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Plane007_body_0.geometry}
//               material={materials.body}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Plane007_wheels_left_0.geometry}
//               material={materials.wheels_left}
//             />
//             <mesh
//               castShadow
//               receiveShadow
//               geometry={nodes.Plane007_wheels_right_0.geometry}
//               material={materials.wheels_right}
//             />
//           </group>
//         </group>
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('/models/stylized_car.glb')
